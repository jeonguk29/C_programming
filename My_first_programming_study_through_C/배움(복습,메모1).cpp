
#include <stdio.h>//이 라이브러리를 추가해야지 printf 같은 함수를 쓸수있음 (스텐다드 인풋 아웃풋 헤더파일) 
#include <limits.h>// INT_MAX 같은 한계값 같은것을 사용할수 있게 해주는 라이브러리임 이것이 없으면 INT_MAX를 사용할때 오류가남  
#define months 12 /// define 지정하겠다 months 상수이름 12 값  (상수지정) 상수 숫자 넣어주기  

int main (void)///// 자바나 c플플 같은 거의 모든언어가 거의 공통적으로 어떠한 프로젝트를 시작했을때 가장 첫번째로 실행되는 부분 
               //////////메인함수는 밑에 코딩을 한줄한줄 읽어주는 역할을 하는 중요한 녀석 그렇기에 즉 어떤 언어던 대부분 이 메인 함수부터 시작됨
			    
{
	int x =50;   /// x라는 변수는 자료형중에 인트형이다 즉 자료형 인트는 변수를 (x) 이렇게 선언 한것임  + 변수 x는 50이라고 지정된것임 
	             /// int 형이란 정수형을 의미하는데 -7, 0 ,7 이런것을 의미함 그러니까 즉 하나의 정수를 선언할때 이렇게 인트를 넣어주는것임 
	             /// ; 세미클론은 하나의 명령이 끝남을 알려주는 약속 같은것
				  
	printf("인트x에 크기는%d입니다.\n",sizeof x); // printf 는 사용자한테 어떠한 메세지를 출력해주는 가장 기본적인 함수  
	                                            // 자료형이 int 면 무조건 4바이트 많큼 차지 하게됨 
	// sizeof는 c언어에서 제공하는 기본적인 함수인데 x라는 변수가 얼마만큼 메모리를 차지하는지 알려주는 함수임  
	printf("인트x에 값은 %d입니다.\n", x);  // %다음 d를 뜨면 이자리에 int 값이 들어간다는 뜻 그값은 ,x 씀으로써 x라는 변수가 들어간다는 뜻임 즉 50 
	                                         // \n은 줄바꿈이라는 의미 즉 엔터  
	
	int y = INT_MAX; //c언어 에서 기본적으로 제공하는 인트형이 가질수있는 최고값을 의미하는데 20억정되됨 (대문자로 입력해야함) 
	printf("인트y에 최댓값은 %d 입니다. \n", y);  // over flow 라는 개념인데 특정한 변수가 가질수있는 그범위를 넘었을때  
	printf("인트y에 최소값은 %d 입니다. \n", y+1);// 예를들어 인트형이 가질수 있는 최댓값에 +1을 하게되면 끝에서 끝으로 돌아가 최솟값이 나오게 되는것임 
    // |min |   0   |max|
    //         <=   이렇게 끝에서 끝을 의미함  
	
	//// 자료형중 double 형과 float 형은 정수형이아니라 실수 즉 소숫점까지 표현할수있는 자료형임    
    double z = 123456.123456;    ///// 항상 끝에 ;를 뺴먹는거같음  
	printf("인트z에 소숫점 3번째 자리까지 구해라. %.3f\n",z); /// 주의 , 잘찍자
	                                                        /// %.3f 에서 %f는 실수형을 표현하는것이고 .3은 소숫점 3번쨰까지 표현하라는 뜻이다  
	float a = 123456.123;
    printf("인트a에 소숫점 1번째 자리까지 구해라. %.1f\n",a); //float 형은 4바이트 까지만 자리를 차지해서 실수를 표현할수 있는 자료형이긴 하지만 
	                           //표현 범위가 대게 좁음 그래서 4바이트를 넘어가면 이상한숫자가 나오는데 거기가 플랏용량이 커버할수없는 범위라 잘린것임 
	                           // 그래서 플랏에 용량에 2배나 되는 double를 (8바이트) 사용하는것임  
    
    int b = 10;
    int c = 20;
    
    printf("인트 b와c를 더하면? %d\n",b+c);
	printf("인트 b와c를 뺴면? %d\n",b-c);
	printf("인트 b와c를 곱하면? %d\n",b*c);
	printf("인트 b와c를 나눠라? %d\n",b/c);
	printf("인트 b와c를 나누고난 나머지는? %d\n",b%c); // 소숫점 자리 까지 구하라고하면 0.5.로 나누어져서 몫이 0.5.이고 나머지가 없는데
	                                                 // 나누기 자체가 정수로 나누는 것이라 소숫점까지가아닌 0 자체만을 기준으로 두기 때문에 나눠지지가 
													 // 않는것임 나머지가 없게 구하라라고 하면 즉 실수범위 까지 나누어라라고 하면 0.5가 몫이고 나머지가 
													 // 0                                                      __
													 // 나머지가 10이 나온는 이유는 10이 20으로 안나눠 져서 20/10 그대로 10이 내려온것임  
													 
	double MONTHsalary =2000.5; /// 이것은 define 으로 상수를 지정해주지 않았다면 오류가 남  상수를 지정해줘야 밑에 처럼 곱할때 따로 months를 선언
	                           // 하지 않아도 되는것임  
	printf("내 연봉은 %.2f\n", MONTHsalary*months);
	
	
	float  money = 500.1;
	printf("연봉은%.2f\n", money*months); 
	  
	//////// 케릭터형은 내부적으로 숫자로 구성됨 / 우리한테 보여지는것은 문자 알파벳으로 보이겠지만 내부적으로는 숫자로 구성되어 운영됨  
	/////// 그래서 65를 입력해도 A로 나오고 A를 %d로해도 65가 나옴 이것을 아스키 코드라고함 
	/////// 참고 char형은 ''가 필요하고 int 형은 '' 필요없음 char에 숫자를 입력할때는 ''필요없음 
	
	char d = 'L'; 
	char e = 'o';
	char f = 'v';       
	char g = 'E';
	
	printf("%c%c%c%c\n",d,e,f,g);
	
	///// 비효율적의 예시 밑에꺼 
	char h='g';
	char i='u';
	char j='c';
	char k='c';
	char l='l';
	printf("%c",h);
	printf("%c",i);
	printf("%c",j);
	printf("%c",k);
	printf("%c\n",l);
		
		
	char n= 's';  
	char m=	'e';
	char o= 'x';
	char p= 'y';	
	printf ("%c%c%c%c\n",n,m,o,p);
	printf ("%d%d%d%d\n",n,m,o,p);
	
	int q = 66;
	int r = 79;
	int s = 89;
	int t = 83;
	printf ("%c%c%c%c\n",q,r,s,t);
	printf ("%d%d%d%d\n",q,r,s,t);
	
	 int u =100;
	 printf("100을 10진수로 표현하면 %d\n",u);//10진수는 0부터 9까지 숫자로 모든 숫자체계를 표현하는것을 말함   
	 printf("100을 8진수로 표현하면 %x\n",u);//8진수는 0부터 7까찌 숫자로 모든 숫자체계를  표현하는것을 말함  
	 printf("100을 16진수로 표현하면 %o\n",u);//16진수는 0부터15 까지 숫자로 모든 숫자체계를  표현하는것을 말함 
	 
	 // %d 십진수 표기방법 %x 8진수 표기방법 %o 16진수 표기방법  
	 
	 //int 라는 자료형은 이렇게 출력양식에 따라서 간단하게 다른 진법으로도 변환이 가능함   
	
	
									  
	return 0;//  하나의 함수가 종료될때 반환값을 정해주는 지정된 약속 (0을 반환해줌으로써 프로그램이 종료된다는 뜻을 의미함) 
	
 } 
