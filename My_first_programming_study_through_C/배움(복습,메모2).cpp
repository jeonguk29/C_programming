#include <stdio.h>
#define second_por_minute 60 // 여기서 지정된 상수 이름을 정할때 띄어쓰기를 언더바로 해야함 그렇지않으면 오류가남 
#include <math.h>// pow 즉 거듭제곱 과 abs 절댓값 함수를 사용할수있게 해주는 라이브러리임  
                 // pow처럼 풀네임의 약자의 형식으로 함수의 이름이 정해져있음 (c언어 자체에서 이미정해진이름) 하지만 길어봤자 3~4 글자라 외워서 
				 // 사용하자 
 
int main (void)
{
	
	// 연산자와 define을 통해 상수를 지정하여 초를 입력받고 몇분 몇초인지 계산해주는 프로그램   
	int input = 1000;
	int minute = input/second_por_minute;// 이렇게 프린트에서 곱하고 더할필요없이 인트에서 변수이름을 정해주고 난다음 값을정할때 사용해도됨   
	int second = input%second_por_minute;
	printf("%d초는 %d분 %d초 입니다\n",input , minute, second);// 이렇게 프린트내에서 여러게에 변수를 차례대로 입력하면 순서대로 나오게됨 따로따로 
	                                                           // 입력할 할필요없음  
	
	/// 기본 증감 연산자 
	int x= 0;                                    //  ++ 는 1을 더하라 -- 1을 뺴라는 뜻 
	printf("현재변수 x의 값은 %d입니다.\n",x++);//이렇게 x뒤에 ++ 쓰면 출력했을때 값은 0으로 나오는데 그이유는 출력한뒤에 1을 더하라라는 뜻이기 때문 
    printf("현재변수 x의 값은 %d입니다.\n",x++);  
	printf("현재변수 x의 값은 %d입니다.\n",++x);// 여기서는 x앞에 ++를 해주었기 때문에 1을 더하고 나서 출력하라는 뜻임 x앞과 뒤 어느곳에 연산자를 사용   
	printf("현재변수 x의 값은 %d입니다.\n",x--);// 하느냐 에 따라 출력했을 때 값이 달라짐  
    printf("현재변수 x의 값은 %d입니다.\n",--x);
    printf("현재변수 x의 값은 %d입니다.\n",x-1);     // x++ ,x+1 ,x+=1 모두 = x= x+1과 동일 1만큼 증가시킨다는 의미를 가지고있음  
    
    // 복합 대입 연산자  
    int z = 50;
    printf("현재변수 z의 값은 %d입니다.\n",z);
    z += 50;/// 여기서 인트를 한번 더쓰면 오류가남 왜냐하면 위에서 썻기 때문 
            /// z +=50는  z= z+50 z에 50을더해서 z에 넣어주겠다는 뜻임. 
    printf("현재변수 z의 값은 %d입니다.\n",z);
    z *= 50;
	printf("현재변수 z의 값은 %d입니다.\n",z);
	z /= 50;
	printf("현재변수 z의 값은 %d입니다.\n",z);
    z %=3; ///// 디파인이 정해져있을때는 몇으로 나눌껀지 정해주지 않아도 괜찮지만 없을때는 이렇게 정해줘야함 
    //% 는 몇으로 나누고 난 나머지라는 뜻 그러니까 3으로 설정하면 3으로나누고 난 나머지라는 뜻  
    
 
	printf("현재변수 z의 값은 %d입니다.\n",z);
    printf("현재변수 z의 값은 %d입니다.\n",z+=50);
    printf("현재변수 z의 값은 %d입니다.\n",z-=40);
    printf("현재변수 z의 값은 %d입니다.\n",++z);
    printf("현재변수 z의 값은 %d입니다.\n",z+1);
    printf("현재변수 z의 값은 %d입니다.\n",z+1); // +1 더해지는게 이상함 (질문) 
    
    //관계연산자  
    int y =50, w =30; /// 한줄에 값이 써줄때는 , 컴마가 꼭 필요함  
	                        /// 참고로 C언어에서 0이 출력되면(false 거짓값을 의미함) 그와 반대로 1은 대표적으로 C언어에서(true 참값을 의미) 
							/// 사실0 뺴고 나머지값을 전부 참으로 인식함     
	printf("변수 y와 w는 값이 같은가?%d\n",y==w);// 컴퓨터에서 y와w가 같은지 판별하기 위해서는 =두개 ==을 써줘야함 즉 같은지 물어보는것  
	printf("변수 y와 w는 값이 같지 않은가?%d\n",y!=w); // !=는 같지않고 다른가?라는 뜻  항상 =뒤에 연산자가 앞에  여기서 오류나면 밑에도 오류남  
	printf("변수 y는 w보다 값이 크가? %d\n", y > w);// 부등호 또한 큰값을 출력하는것이 아닌 물어보는것임 그래서 0아님 1로 나옴  
    printf("변수 y는 w보다 값이 작은가? %d\n", y < w);
    printf("변수 y에 w값은 넣으면? %d\n",y=w); // 대수학에서 =는 y와 w가 같은상활 그자체를 의미하지만 C언어에서  
	                                         // =은 오른쪽값을 y에 집어넣을거라는뜻 그래서 출력되는것은 w값임 왜냐하면 수학처럼 왼족으로 계산이
	                                        // 되는데 그러면 w가 y에 들어가고 w값이 출력되기 때문.   참고로 50에30을 더하는 뜻이아님 그리고  
	                                        // 또하나 참고 하자면  나중에 제어문 할때 관계연산자 많이 쓰임 ex if 문
	                                  // 마지막  참고 ==(같은가?) 요게 트루면 !=(다른가) 는 펠스 값일것임      
    
    if(y==w)
	{
		
		//트루값일때 실행되는 부분 
		
	 }  
	else
	{
		
		//false 값일때 실행 되는 부 
	 } 


    // 논리 연산자  
	printf("변수 y가 w보다 크고 40보다 작은가? %d\n",(y > w) && (y < 40));// 이러면 두가지 질문의 대한 답을 묶어서 트루값으로 반환함 &&이것은 and 의 의미 
                                                                       //그리고, 그와동시에 라는 뜻을 가지고있음 그래서 두가지 질문중 하나라도 틀리면
																	   // 0 (거짓)값이나옴  
	printf("변수 y가 w보다 크고 60보다 작은가? %d\n",(y > w) && (y < 60));
	printf("변수 y가 w보다 작거나 혹은 30 이상입니까? %d\n",(y < w) || (y > 30)); // || 은 혹은이라는 뜻을 가지고있어서 왼쪽에 있는게 성립하거나 
	                                                                            //오른쪽에 있는게 성립하면 즉 둘중하나만 성립하더라도 트루값을 반환
																				//하도록해줌 
	printf("변수 y가 w보다 크고  혹은 30 이상입니까? %d\n",(y > w) || (y > 30));
	
	//printf("변수 c는 20보다 작으며 5보다 큰가 또한 e와 같은가? %d\n",(c < 20)&&(c > 5)||(c == d));
     
	 int gg=20; 
	 printf("gg가 20보다 크거나 40보다 작을때 %d\n",(gg == 20)|| (gg > 40) ); // 이것을 웨에 y,w 로 바꿔서 하면 오류 4바이트가 넘어서인가?  (질문) 
	
	//참고로 x가 100과 200 사이에 있다고 할때 100< x <200 이아니라 (100<x) && (x<200) 로 표현하는게 올마른 연산식 표기임  

	
	
	// 조건 연산자 
	// 조건 연산자가 많이 사용되는 이유는 코드를 굉장히 짧고 간결하게 만들어주기 때문이고 그러면서도 되게 논리적으로 부합하기 때문
	// 주로 밑에처럼 두개의 숫자를 비교할때 많이 사용됨   
	int a= -50;
    int b= 30;
    int absolutex = (a>0)? a :-a; // 영단어 absolute은 절댓값이라는 뜻임 그리고 ?은~~ 하다면 이라는 뜻을 가지고있음
	                              // 그래서 a가0보다 크다면 트루라면 왼쪽에 그대로 출력하고 펠스 거짓이라면 즉 a가 0보다 작다면 오른쪽에 출력하라는뜻
								  // 그리고 절댓값은 - 없어야 되서 오른쪽에 출력시 - 를붙혀서 반환함 즉 -를 없에버림 
								  
    int max = (a>b)? a : b;  // 이것은 두수중 항상 더 큰 값을 반환하게 되는것인데 a가 b보다크면 왼쪽으로 출력. 하지만 만약 그렇지앟다면 a보다 값이 
	                         // 더 큰 b를 오른쪽으로 출력해라 라는뜻  
    int min = (a<b)? a : b;  // 이것은 두수중 항상 더 작은 값을 반환하게 되는것인데 a가 b보다 작으면 왼쪽으로 출력. 하지만 만약 그렇지앟다면 a보다 
	                        // 값이 더 작은 b를 오른쪽으로 출력해라 라는뜻  
    
    printf("변수 a의 절댓값은? %d\n",absolutex); 
    printf("변수 a와 b의 최댓값은? %d\n",max);
    printf("변수 a와 b의 최솟값은? %d\n",min);
    
    
    // 거듭제곱 연산자 (사실 연산자라고는 할수 없지만 자주사용되는 거듭제곱 연산 함수이기 때문에 배워봄)
	 
    double c= pow(2.0 , 20.0); // pow 파워에 약자 pow는 거듭제곱 연산을 지원해주는 하나의 함수라고 할수있음 
	                           // 다만 pow를 사용하기 위해서는 #include <math.h> 라는 라이브러리가 필요함  
    printf("2의 20제곱은? %.0f\n",c);// 소숫점 자리까지도 가능   
    
    int d= pow(3 , 30);         //인트로도 가능  
    printf("3의 30제곱은? %d\n",d);
    
    
    
    
    
    
    
    
    
    return 0;
 } 
