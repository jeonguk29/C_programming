#include <stdio.h>

// 포인터를 이용하여 두변수의 값을 서로 변환하기  

// 두변수의 값을 서로 변환하는 포인터 함수  
void swap (int *x,int *y) // 스와이프라는 함수를 만들고  int*x, int*y 포인터 사용 하겠다 아까 말했듯이 포인터를 선언할때 이렇게 *을 붙혀서 선언함   
        // 쉽게 말하면 int 형의 어떠한 값을 가르키는 포인터 x를 만들었다고 할수있는것임   
        // 이렇게 하면 x,y 각자 자기가 가르키는 곳은 자기자신의 주소가 됨  
{       
	int temp;  // 인트 템프를 선언하고 
	temp = *x; // 템프는 이렇게 포인터 *x가 가르키는 위치에 값을 넣어줌 
	           // *x 이렇게 * 별한다음에 포인터를 선언하고  변수를 x 넣어주면 그포인터 가 가르키고 있는 즉 x가 가르키고 있는 특정한 위치 주소에 있는 
			   // 그변수의 값을 가져오게 되는것임.         temp = *x; 이런식으로 그값을 얻어와서 템프에 넣어줄수 있도록함  
	*x = *y;  // 그다음 x가 가리키고 있는 값을 y가 가르키고 있는 주소의 값으로 바꿔주고  
	*y = temp;// y가 가르키고 있는 주소의 값에 템프를 넣어주면 완벽함  
	
}

int main (void)
{
	int x=1;// 여기는 x와 y의 값을 입력 받는 곳이고 함수에서는 그 값의 주소를 바꿔주는 것임  
	int y=2;// int *x;   이렇게 하면 x가 없는데 함수에서 x주소에 값을 넣어서 오류가 생김  
	        // x=10;
	swap(&x,&y);// 스와이프 한다음 이렇게 x와 y의 주소를 함수의 매개 변수로 넣어주면 정상적으로 수가 바낌 
	            // 함수에서 포인터를 쓰면 이렇게 & 주로를 입력 해주어야함  
	printf("x = %d\ny = %d\n", x, y); // 수가 바뀌는 이유를 설명하자면 먼저 함수에서 내가 명령을 준대로 컴퓨터가 순서대로 진행이 되는걸 알고있어야함  
	                            // int temp = 1   그다음  temp = *x 인데 현재 x가 가르키고 있는 주소의 값은 1임 그럼 temp 는 값이 그대로 1임 
								// 그다음 *x 는 *y 가 가르키고 있는 주소의 값이 들어와 *x는 2가 되고 
								// *y는 temp 의 값을 가르기고 불러와서 1이 됨 그럼 *x는 *y가 가르키는 주소의 값 2를 가르켜 그값을 불러오고   
							    // *y는temp 에 값으로 주소에 입력을 해주어 1이 됨  그럼 둘이 바뀌어 x=2 y=1 이 됨  
	return 0;
 }                            /* 실제로 이렇게 두변수의 값을 변환할때는 포인터를 이용해서 함수를 만들어야 되는데 그이유는 이포인터를 이용하지 않게 
                              되면은 매개변수로 넘어온 값들은 함수 내에서만 처리가 되기 대문에 포인터를 이용하지 않는 경우에는 정상적으로 두변수의
							  값이 바뀌지 않는것임  예를 들자면  
 
 void swap (int x,int y)    이렇게 포인터를 전부 없에 주면  x 와 y의 값은 변경이 안됨 왜내면 함수로 들어간 x와 y의 값은 매개변수로서  
                             함수내에서만 사용되기 때문에 즉 함수내에서만 값이 바뀌기 때문에 종료가 되면은 main 함수에는 전혀 영향을 끼치지 못하기  
{                           때문임  메인 함수에서는 swap(x,y); 함수를 사용했을뿐 이함수를 통해서 x와 y의 값이 변경 되지는 않음  
	int temp;  
	temp = x;     temp =1 x=1  즉  temp 는 1 			  
   	x = y;        x=1 y=2  x는 2       
	y = temp;     y는 2 temp =1  y는 1 허나 여기서만 이함수 내에서만 값이 변하고 밑에 int main 에서는 변하지 않고 그대로 출력하기 때문    
                  void 함수라 그냥 계산식만 이용 	                             
}

int main (void)
{
	int x=1;
	int y=2;
	swap(x,y);  그렇기에 여기서는 그냥 값만 함수로 보내주고 출력이 되기 때문에 x,y의 값은 변경이 안됨  
	            
	printf("x = %d\ny = %d\n", x, y);   
	                             
	return 0;
 }       
 
 이것은 처음에 잘 이해가 안가도 포인터의 개념과 함수의 개념을 명확하게 계속해서 실습 하면서 숙지하다 보면은 금방 이해가 갈것임 
 실제로도 이 swap 함수는 정말 많이 사용되고 가장 대표적인 포인터를 이용한 함수예재라고 할수 있음
 
 이런식으로도 포인터를 이용하면 특정한 함수가 사용이 될때 단순이 이함수가 끝나면서 변수들이 끝나는게 아니라 이함수를 불러온
 메인 함수에서도 영향을 미칠수 있게 되는것임 한마디로 포인터를 사용하면은 프로그램 전역에서 언제 어디서든 간에 
 어떠한 변수가 가지는 값들을 바꾸거나 그런식으로 포인터를 이용해서 정말 가지각색의 프로그래밍 기법들을 운용 할수 있을것임
 실제로 이러한 포인터를 이용해서 정말 위협적인 해킹관련 공격기법도 존재하고 다양한 웅용 프로그램을 개발할때 도음을 얻을수 있다고 할수있음     
 
 포인터는 그래서 정말 처음에 접할때는 조금 어려우면서도 반드시 알아두어야할 할부분이라고 할수가 있음  
 
 
 // 포인터를 이용하여 변수의 값을 바꾸어 보기  
 
 #include <stdio.h>
int main (void)
{
	int i=10;
	int *p; // 이렇게 포인터 변수를 선언해주고  그냥 int *p=&i; 이렇게 해줘도 됨 보기쉽게 
	p=&i; // 포인터 p가 가르키는 주소를 변수 i의 주소로 해준뒤 초기화 해줌 즉 포인터 p는 10임  밑에 주소를 연결할때는 * 안붙힘  
	printf("i = %d\n",i); // 그래서  이렇게 출력할때는 i =10 그대로 출력이 되지만   
	*p = 20;  // 이 포인터 p가 가르키고 있는 주소에 20을 넣어주면(바꿔주면) 수를 엏러줄때는 * 붙임  
	printf("i = %d\n",i); // i는 20으로 출력이됨  
   
	// 이런식으로 포인터를 이용하면 정말 가지각색에 변수 활용이 가능함 이렇게 포인터를 배워본것을 정확하게 숙지하면 포인터에대한
	// 전번적인 개념이해는 됫다고 할수있고 확실하게 이해만 한다면 정말 다양한 프로그래밍 기법들을 응용할수 있을것임  
	
	return 0;
}


*/
