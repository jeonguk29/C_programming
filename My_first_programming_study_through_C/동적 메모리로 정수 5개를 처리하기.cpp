#include <stdio.h>
#include <stdlib.h> 
int main (void)
{
	int *pi,i; //다음과 같이 int형에 *pi와 i를 선언해줌 (한줄에 포인터변수와 같이 선언이 가능함) 
	// 즉 이렇게 한개의 인트형 포인터 변수와 그냥 인트형 변수를 하나 만들어주고
	
	// 이제 포인터 변수에 동적 메모리 할당을 해주겠습니다.  
	pi = (int *)malloc(5 * sizeof(int)); 
	//(5 * sizeof(int));  아까와 같이 이러한 형태는 총 5개의 인트형데이터가 들어갈수있는 마치 배열과 같은 공간을 만들어 주는것이라고 했음 
	// 이제 다음과 같이 
	if(pi == NULL) //동적 메모리 할당이 안됬다면 
	{
	   printf("동적 메모리 할당에 실패했습니다.\n");
	   exit(1);           
	}              // 이렇게해서 메세지 출력과 함께 프로그램을 종료할수 있도록 해줌 
	               // 이제 다음과 같이 해줌 
	pi[0] = 100; // 바로 포인터 인테져 0번째 인덱스에 100을 넣어 주는거임   
	pi[1] = 200; // 아까 말씀 드렸듯이 이 pi[0] = 100; 배열과 이 pi = (int *)malloc(5 * sizeof(int)); 포인터를 이용한 동적 메모리할당은 굉장히 밀접한  
	pi[2] = 300; // 연관성이 있다고 말했었음  
	pi[3] = 400;
	pi[4] = 500;        // 이제 이렇게 1번째 인덱스에는 200을 넣고 4번째인덱스에는 500을 넣어 총이렇게 5가지 공간에 각각에 특정한 값들을 넣어 보았  
				        // 습니다. 
	// 이제 한번 다음과 같이 해볼게요  
	
	for(i = 0;i < 5; i++) //i는 0부터 5까지 1씩 더해나가면서  
	{
		printf("%d\n", *(pi + i)); //printf 로 하나씩 출력해주는것김  *(pi+i) 이렇게 즉 아까전에 했던것과 거의 비슷한 형태로 
		// 이렇게 포인터주소를 하나씩 증가시켜나가면서 거기에 해당하는 위치에 값을 출력할수 있도록 하는거죠   
	}
    free(pi); // 이제 마지막으로 이렇게 pi를 동적 메모리 할당을 해지 해주면됨   
	return 0;
}
/* 이렇게 실행하면 100~500까지 출력되는것을 알수있음 사실이건 아까전에 이야기 했던것과 굉장히 흡사한 개념이고 비슷한 예재이기 때문에 
쉽게 이해 할수있을것임  

다음과 같이 그림판을 이용해서 더욱자세한 설명을 해보겠음 아까전과 비슷하게 
이 pi라는 것은 특정한 포인터 변수인데 
어떤 포인터 변수냐면 

________________ 이렇게 RAM램이 있다고 가정을 했을때 총 5개의 인트형이 들어갈수 있는공간이 이렇게 할당이 되어서  
               | 
| | | | | |    |  그중 첫번째에 해당하는 메모리 주소를 이렇게 pi라는 포인터 변수가 가지게 된것이죠 (맨처음 | |)
               | 
               |
ㅡㅡㅡㅡㅡㅡㅡㅡ   여기까지가 바로  pi = (int *)malloc(5 * sizeof(int)); 이부분에 해당하는 코드라고 할수가 있어요     
                   이제 그다음에
				   pi[0] =100;  첫번째에 해당하는 즉첫번째를 가르키고있는 이변수에 위치에 해당하는 |ㅁ|ㅁㅁㅁㅁ  이값이 있으면은 (첫번째 ㅁ가르키는) 
                  그값에 100을 넣어준것입니다. 

                  pi[1] 그다음에 이두번째 인덱스 1이라고 할수가 있죠  
                  | | | | | |
                   0 1 2 3 4
                   이렇게 하나씩 데이터가 들어가는것임 
                  | 100 | 200 | 300 | 400 | 500 |				   
				   이런식으로 하나씩 값이 들어간것임 한칸씩 오른쪽으로 이동하면서 인덱스가 1씩 증가하기 때문임
				   이러한 원리로 데이터가 들어갔다고 생각하면됨 
				   
				   즉 다음과 같이 pi의 0번째 인덱스는 pi[0] = *(pi +0) 이렇게 *pi +0 과 같다고 할수가 있는것임   
                                                 즉     [0] 여기 숫자가 하나씩 증가되면  *(pi +n)  +n 여기 또한 숫자가 하나씩 증가가 되는것임    
                   
                | 100 | 200 | 300 | 400 | 500 | 그래서 이렇게 모든값들을 넣은 다음에 나중에  
    
	for(i = 0;i < 5; i++) 
	{
		printf("%d\n", *(pi + i));  이렇게 하나씩 출력할때 *(pi +i)  여기에 해당하는 값이 차례대로 100,200,300,400,500 이렇게 출력이 되는것임  
	}

    그다음 이렇게 free(pi); 메모리 할당을 해지해줌으로써 프로그램을 종료할수 있도록 해준것 
	
	** 이러한 전반적인 내용이 사실 동적메모리 할당에서 가장 중요하면서도 처음엔 이해하기 조금 까다롭지만 이해만 하고나면 정말 편리하게
	 각종 프로그램들을 활용 할수있도록 되는 그러한 파트라고 할수가 있음 ** 
	 
	 네 이렇게 이번시간에는 간단하게 동적 메모리의 원리와 동적 메모리가 내부적으로 어떠한 구조로 이루어지는지 그러한 전반적인 내용을 살펴보는
	 그러한 시간을 가져보았음  
	
*/				                                        
