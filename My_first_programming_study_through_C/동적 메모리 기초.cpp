#include <stdio.h>
#include <stdlib.h>// 동적 메모리를 사용하기 위해서 필수적으로 넣어 주어야하는 라이브러리 
int main (void)
{
	int *pi;// => 바로 다음과 같이 정수형 포인트 변수를 만들어줌, 흔히 이러한 식으로 변수를 만들어 주는데요 
    // 여기서 말하는 pi의 경우는 pointer integer 의 약자라고 할수있음 정수를 가르키다 
	//사실 뭐 일반적으로 이렇게 사용하니깐 알고 있으라는 식으로 한번 사용해봄 
	
	//그다음 이제 메모리 할당을 헤볼것인데 이부분이 처음접한 사람들한테는 조금 헷갈릴수 있는데 밑에와 같이 할당을함  
	pi = (int *)malloc(sizeof(int));// 이 malloc 자체는 메모리를 할당해라 라는 의미를  가지고있음  
	// 그렇다면 메모리를 얼마 할당할지는 (sizeof(int) 이부분이 정해주는것임 
	//  malloc(sizeof(int)); 즉 인트형의 크기 만큼 할당해라 라고 해준것임 이거대신  malloc(4); 4를 넣어주어도 상관없음  근데 일반적으로
	// 이렇게 넣어주는게 가장 효과적이고 읽기가 편함 사실 인트형의크기 자체는 4바이트기 때문에 (4);를 넣어도 상관이없음 
	// malloc(sizeof(int)); 그다음 이렇게 메모리를 할당한다음에 할당밭을 그부분에 주소를 가르키도록함넣어줌 어디에? (int *) 이안에 
	// 그럼 int *이 가르키는곳은 int형의 4바이트를 가르키는 공간이 된것임  인트형의 포인터 변수는 가르키는곳이 4바이트의 공간 
	// 바로이렇게 인테져 포인트로 형변환을 해줌으로써(인트형으로) 이포인터 인테져 pi= 라는 이름에 변수가 해당 위치를 기억해줄수 있도록함 
	//즉 pi = 포인터형의 변수였지만 가르키는곳은 int형의 메모리 4바이트 만큼 차지할수 있는 공간 을 가르킨다 
	// 그럼 pi는 인트형이 되는것임 일시적으로 그공간을 할당 받아서 *pi는 *는 4바이트 인것임  
	
	/* 사실 이부분 자체는 굉장히 거의 외우다 시피 할정도로 거의 많이 보게 될거고 이러한 틀에서 벗어나지 않습니다.
	그래서 실은 처음엔 이런식으로 그냥 계속 사용을 하다 보면 나중엔 알아서 이러한 형태가 되게 익숙해지고 이해가 갈것임   
	*/
	
	if(pi == NULL)// 만약 pi가 가르키는게 없다면 주소를 항당 밭지 못했다면 
	{
		printf("동적 메모리 할당에 실패 했습니다.\n");//를 이렇게 출력해주고 
		exit(1);// exit = 나기기 를 해줌으로써 이프로그램을 종료합니다. 
	}           // 지금 실행하고있는 이프로그램 자체를 종료하는것을 의미함 
	
	// 이렇게 할당밭은 메모리는 어떻게 사용할수 있을까요 ?
	*pi = 100;// 바로 이렇게 포인터 pi라는 포인터 변수가 가르키고 있는 그주소의 값에 100을 넣어 주어라 라고 해줌 그다음 
	printf("%d\n",*pi);// 그값을 출력하라고 해주면됨 그럼 100이라는 값이 출력될것임 100이라는 값을 넣었기 때문 
	
	/*중요:  동적 메모리를 사용한 이후에는 무조건 해당 메모리를 반환합니다. 
	이건 굉장히 중요한데요 전반적으로 시스템에 안정성을 높이고 메모리의 효울성을 높이기 위해서는 이렇게 반드시 동적 메모리를 사용한 후에
	*/
	free(pi);// 이렇게 pi를 해주게 되면은 이 pi포인터 변수가 가르키고있는 메모리 주소의 메모리 할당을 해지해준다는 이야기 입니다.
	// 이렇게 프로라고 해서 메모리 할당을 해지 해주어야함 자유로운,통제 받지 않는 
	
	/* 즉 100을 출력해줄때만 int형의 메모리를 할당밭고 출력이 끝나면 할당해준 sizeof(int)=4 가 자유롭게 날아가서 다시 컴퓨터안 램 저장공간에 들어옴 
	어떻게 보면 줬다가 너 다씀? ㅇㅋ 하고 다시 뻇음 대여 개념 
	  
	다시free(pi); 정리해보면 pi이 가르키고 있는부분이 (int *)malloc(sizeof(int)); 이부분인데 그렇기 때문에 현재 할당된 4바이트 만큼에 메모리를 할당
	해재 해준다는 의미인것임  */
	return 0;
 } 
 
 /* 이런식으로 이제 동적 메모리를 사용할수 있습니다 동적메모리가 이제 c언어에서 가장 마지막에 배우는 문법이다 보니까 상당히 뭔가 
 어렵다는 느낌이 들수 있는데 나중에는 이걸 하도 사용하다보니까 동적 메모리가 굉장히 익숙해지실것임 
 
 동적 메모리는 이렇게 그림을 그려가며 설명하는것이 빠를것임 
 
 int *pi; 보면 인트 포인트 형으로 pi라는 변수를 만들었죠? 
(int *)malloc(sizeof(int)); 그렇다면 이 pi라는 변수는 특정한 인트형 변수에 위치를 기억하는 포인터 변수라고 할수가 있음 
                             즉 주소를 기억하는 포인터 변수라고 할수가 있음 즉 주소를 기억하는거죠 애자체는 별로 의미가 없고 
							 애가 가리키는 그주소가 더의미가 있다고 할수가있음 
							  
malloc(sizeof(int));  먼저 1. 이것이 수행될것임  
         ㅠ
         V      그럼 수행이 되자마자 우리의 램Ram 에서 우리의 램에서 사용이 안되고 있는 메모리 영역이 있을것임   
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
         |  |  |  |  | 그럼 이제 아무영역에서 이렇게 4바이트 만큼 이런식으로 특정한 위치 (인트형이 4바이트라) 
					 | 사용이 안되고 있는 위치에 이렇게 할당이 이루어진다고 생각하면됨 
					 |
					 |
					 |
					 |		  
 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 
 
 
 보면이제  (int *) 여기에서 이렇게 괄호한 다음에 int형하고 묶어주었는데 이걸 형변환 이라고함 
(int *)malloc(sizeof(int));  
    2        1             이렇게 1오른쪽에 있는 어떠한 부분을 2 이러한 형태로 자료형을 바꾸어 준다는 으미미임  
	 
 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
         |  |  |  |  |  => 즉 이렇게 요부분의 위치를 1번째가 할당한다음에   이위치를int * 에 반환해준다는 의미임 그걸 기억하는 변수가 pi 이고  
					 |
					 |
					 |
					 |
					 |		  
 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ            
             
다시 설명하자면       (int *)malloc(sizeof(int)); 이거 자체가 순식간에  
                         2.        1
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  
         |  |  |  |  |  1.이렇게 4개만큼 4개의 바이트만큼 위치를 할당해준 다음에  
					 |  2. (int *) 그곳의 위치를 가지고 있는 값(가르키는곳)이라고 할수있어요 그위치를 기억하는 변수는 pi고   
					 |  
					 |
					 |   3. pi=  (int *)malloc(sizeof(int));  보시면 이제 이렇게 나중에 이게 요부분이 이렇게 pi에 들어가는데  
					 |	   이게 무슨의미냐면은 pi에 이렇게 할당해준 위치를 기억하게 해달라고 하는것임 	  
 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 
 말씀 드렸듯이 pi포인터 같은 경우는 자기 자신으론 그다지 의미가 없고 어떠한 변수의 위치를 기억한다고 했죠 그러니까 딱 이렇게
 
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
         |  |  |  |  |  =>     pi = 이 할당된 인트형의 변수의 메모리위치 메모리 주소를 가지고 오는것입니다. 
					 |
					 |
					 |
					 |
					 |		  
 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 
 
 |||||||||||||||||||||||||||||||||||||||||||||||| 
 즉 나중에 이 pi를 이용해서 해당 주소에 접근해서 해당 할돵된 인트형의 변수 값을 바꿀수도 있고 갓갓이 처리를 할수있는거죠 
 이런식으로 운영이 되는게 바로 동적 메모리 할당이라는것임 
 이게 좋은 이유는 아무래도 포인터를 이용하다 보니까 확실히더 조금 어협긴 하지만 메모리를 더 효율적으로 관리 할수 있게 해주고
 갖갖이 정말 다양한 프로그래밍 기법들을 이용할수 있기 때문임 
 
 이렇게 바로 동적 메모리 할당의 원리를 알아보았습니다  
 
 이예재는 그러한 원리를 굉장히 쉽게 이해해줄수 있게해주는 기초 예재라고 할수있음  
 */ 
