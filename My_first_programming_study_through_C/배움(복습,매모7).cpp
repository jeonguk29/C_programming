#include <stdio.h> 
#define NUMBER 5 // 이 number 라는 경우는 일반적으로 배열의 크기를 지정해줄때 c언어에서 이렇게 사용해주는 경우가 많아서 이름을 이렇게 써본것임  
#include <limits.h>

int main (void)
{
// 배열을 통한 5개의 정수중에서 짝수 최댓값과 홀수 최댓값을 구하는 프로그램 	
	
//	int i,max,min,index; // i는 임시적으로 사용하는 배열의 각각의 위치를 의미하는 변수라고 할수있고 max는 최댓값을 의미하고 min은 최솟값을 의미함  
	                     // index 는 최댓값 과 최솟값의 위치를 의미하는것임  
//	int array[NUMBER]; // 이부분이 배열을 만들어주는 방법임 
	// 배열을 다시 설명하자면 다양한 데이터를 삽입할수있는 공간이라고 했습니다. ex 만약 학생들의 성적을 보관한다고 하면 학생5명이면
	//  |70|25|12|48|52| 이렇게 5개가 필요할거고 이런식으로 간단하게 데이터들을 저장할수있을것임 이런식으로 값이 들어갔다 했을때 
	//  배열에는 해당데이터에 순서를 의미하는 인덱스 라는것이 존재함 index(순서) 목차라는 뜻을 가지고있는데 이인덱스 배열에서는 기본적으로
	// |70| 첫번째 데이터가 0이되고  25 두번째 데이터가 1  12 세번째데이터가 2 이런식으로 순서가정해짐 
	// 컴퓨터에서는 대부분이 첫번째로 시작하는 숫자를 0이라고 많이 잡고있음 배열도 마찬가지임 그러니까 즉 배열에서 0은 첫번째 데이터의 위치를 의미함    
	// |70:0|25:1|12:2|48:3|52:4|=> array 만약에 이러한 배열을 어뤠이라는 배열로 지정했을때 array[0] 이값은 70이 되는것임 
	// 왜냐하면 위처럼 어뤠이라는 배열에 0번째 인덱스에 값은 70이기 때문임  바로 이게 기본적인 배열의 활용방법임 
// 다시 정리해서 써보겠음

/*   int i,max,min,index;
   int array[NUMBER];// 1. array[0]~~array[4] 총 5개의 데이터가 들어갈수있는 크기의 배열을 선언해준것임 왜냐면 define 에서 넘버를 5로잡아주었기 때문  
   
   max=0; //4.  이렇게 맥스와 인덱스를 0이라고 해주어야 재대로된밗을 출력할수있음 0이라고 안해주면 1이라  
   index=0; // 이러면 맨처음에 가장큰 최댓값은 0으로 들어가있기 때문에 0보다 큰숫자라고 했으때
            if(max < array[i])  이러면   0 < 입력된값[0~4 순차적으로 ] 
            {                               항상 맥스가 해당 인덱스(순서에) 값으로 바뀌어나가면서 최댓값을 찿아나가는 과정이됨  
			max = array[i]; 그럼 총 5번 검사했을 때 가장큰 최댓값이 요맥스에 들어가 있게 되는것임  
			index=i;
        }
     
            
     
   for(i=0;i<NUMBER;i++) //2.i는0이고 넘버보다 작을 떄의 한에서 i를 1씩 증가시키며 반복시킴 즉 5번 반복함 
                         // 이 i는 결론적으로 |0| 이박스 하나를 의미하는것임 그래서 5번 반복 될때마다|:0|:1|:2|:3|:4|	
	{                                                                                                   // 이렇게 쌓이는것임  
		scanf("%d", &array[i]);      // 그리고 스켄에프에서 값을 입력밭으면 |70:0|25:1|12:2|48:3|52:4| 요렇게 값이 입력되는것임  
		if(max < array[i])       //3. 이부분은 즉현재의 맥스 현재의 최댓값보다 지금검사하는 i번째 인덱스(순서에)에 값이 더크다면 맥스에는 검사한 
		                            그 비교한 값을 넣어주는것임 그 해당되는값을 
		{                        // 넣어주는것임  그리고 index=i에 이값이 몇번쨰 박스인지 해당 위치를 정해주는것임  
			max = array[i];
			index=i;
		}
	}
    printf("가장큰값은 %d입니다. 그리고 %d번쨰에 있습니다.\n",max,index+1);	//5. 여기 인덱스에 1을 더한것은 컴퓨터에서 시작되는 숫자가 0부터 시작이라 
	                                                                        //0~4 라 1을 더해 우리가 볼때 햇갈리지 말라고 해준것임  
	
	 */
	 
	 
	 
   int i,max,min,index;
   int array[NUMBER];  
                          // ex 만약 20 34 72 35 90 이라 했을때 가장 큰값은 90입니다 그리고 5번째에 있습니다. 이렇게 결과가 나오는 이유는  
   max=0;        //array[0]=30 array[1]=34, array[2]=72, array[3]=35 ,array[4]=90 이렇게 차래대로 값이 들어가기 때문  
   index=0;
     
    for(i=0;i<NUMBER;i++)    // 그러니까 이 i가  0부터 시작해서 4까지 증가하면서 이모든 배열의 index(순서) 즉 30~90 까지의 모든값을 체크하면서 
	                         // 가장 큰값을 max에 넣어주는것  
                         	
	{                                                                                                   
		scanf("%d", &array[i]); // 이렇게 해줘야 어뤠이 배열안에 값을 입력할수있으         
		if(max < array[i])       // 처음 멕스는 0 그리고 30[0] 
		{                        
			max = array[i];     // max 는 30이됨  
			index=i;            // 그리고 0번째순서가 최댓값임 이라고 저장 됨  
		}                       // 그다음은 30  34[1]  ->    34    72[2]        이런식임  이러면서 최댓값인 90과 순서를  발견하여 지정하는것임  
	}                           //          34              72  
	                            //           1              2
	printf("가장큰값은 %d입니다. 그리고 %d번쨰에 있습니다.\n",max,index+1);	
    min=INT_MAX; // 최솟값을 찿기위해서는 반대로 민에 아주큰  인트자료형에서 가장큰수인 인트맥스를 넣어줌  
	for(i=0;i<NUMBER;i++) // 5번반복                        	
	{                                                                                                   
		scanf("%d", &array[i]);         
		if(min > array[i])       // 처음 민은 20억 > 30[0] 
		{                        
			min = array[i];     // min 는 30이됨  
			index=i;            // 그리고 0번째순서가 최솟값임 이라고 저장 됨  
		}                       // 그다음은 30  34[1] 이러면 그대로 30    만약  25가 있다면  30    25[2]    
	}                           //                                  30                       25
	                            //                                   0                       2
	printf("가장 작은 값은 %d입니다. 그리고 %d번쨰에 있습니다.\n",min,index+1);
	// 이러면 최댓값을 찿는부분과 최솟값을 찿는부분이 모두 완벽하게 작성이 되었다고 할수있음 
	// 이렇게 간단하게 배열을 이용하면 아주많은 숫자에 데이터도 관리를 할수가 있고 최댓값 최솟값을 방금 찿았던거처럼
	// 다양한 기능들을 손쉽게 구현 할수가 있음  배열은 바로 이러한 목적에서 많이 사용됨   
	
	return 0;
}

// 배열을 통한 5개의 정수중에서 짝수의 최댓값과 홀수의 최댓값을 구하는 프로그램   

/* 
#include <stdio.h>
#define NUMBER 5 

int main (void)
{
    int array[NUMBER];
	int i,addmax,evenmax; // addmax 홀수 최댓값 evenmax 짝수 최댓값이라고 할수있음    
	
	addmax= 0;
	evenmax= 0;
	for(i=0;i<NUMBER;i++) //0~4 5번 반복하면서    
	{
		scanf("%d",&array[i]); // 일단 어뤠이에 특정 인덱스 (순서를) i 즉 0~4 까지 모든순서의 값들을 입력받고 각각의 위치를 검사 할수있도록함
		if(array[i]%2 == 0)// 만약 어뤠이에 특정한 순서에 입력된값이 2로나누엇을때 나머지가 0 즉 짝수라면  
		{
			if(evenmax < array[i]) // 이븐 멕스와 비교를함 ex    0<12 [0]
			{
				evenmax = array[i];// 그리고 이븐맥스가 해당값을 가질수 있도록함 이븐맥스보다 현재 해당하는 비교 값이 더클때 즉 더큰값을 찿았을때 
				                   // 교체 해주는것임  그럼 이븐맥스는 12가 됨      만약 24가 들어오면       24가 되는것임  
			}
	    }
		else // 짝수가아니면 모두 홀수라 이렇게 똑같이써주면 됨  
		{
	          if(addmax < array[i]) 
			{
				addmax = array[i];
			}
		}		
    }
    printf("%d %d",addmax,evenmax);  
	return 0;                                        // 이렇게 해주면 홀수중에 최댓값과 짝수중에 최댓값을 차례대로 출력 하는것을 알수있음                
 }                                                   // 이렇게 배열을 사용하면 아주많은 양에 데이터라고 하더라도 순식간에 자신의 목적에 맞게 
                                                     // 데이터들을 관리하고 추출 할수있음  



2차 배열을 통한 학생들의 수학 영어 점수의 총합 구하기  
 
#include <stdio.h> 
int main (void)
{
	int score[5][2]; // 행이 5고 열이 2개라서 총 10개의 데이터가 들어갈수 있음 | | | 이렇게 및으로 5개 옆으로 2개 
	                 //                                                        | | | 5는 학생의 숫자 2는 수학과 영어점수  
	int total[2]={ 0,};// 이 뜻은 ㅂ차원 배열을 할당할때 모든 데이터 값에 0을 넣어주겠다는 뜻임   2개만큼 공간을 할당했기 때문에 
	                   // { }은 모든 상자에 특정한 값을 넣어 주겠다는 뜻임  
	//               index 0,1 이 존재 이값들의 각각 0이 들어가는것임   |0|                                                                                               
	int i;           //                                                 |0|                      
	for(i=0;i<5;i++)// 5번 반복  
	{
		printf("%d번 학생의 수학, 영어 점수 : ",i + 1); // i+1 출력시 햇갈리지 말라고 
		scanf("%d %d", &score[i][0], &score[i][1]);//  &score[i][0] 즉 수학점수만 학생 번호 차례대로 입력하겠다.  
	}                                              //  &score[i][1] 즉 영어점수만 학생 번호 차례대로 입력하겠다.
	
	for(i=0;i<5;i++)      // 이중for문이 아님 위에꺼끝나고 다시 5번 반복 
	{
		total[0] +=score[i][0]; // 예를들어 &score[i][0] 입력할때 0,0 =50 이다 하면 &score[i][0]의 값은 50이 되는것임 
		                        // 그래서 total 첫번째 상자에 0+50 = 50이 되는것임  이런식으로
		                        //  계속 값이 들어올때마다 1.0=40 2.0=30  이런식으로 값이 들어오면 50+40 90+30 이와같이 입력된값을 계속 더해줌   
		total[1] +=score[i][1];
	}
	printf("\n\n5명의 수학점수 합계 : %d\n",total[0]);//  그래서 마지막 까지 입력된 데이터의 값을 다더해서 출력하면 총값이 나오는것임  
	printf("5명의 영어점수 합계 : %d\n",total[1]);
	return 0;
} /*
  이렇게 프로그램을 짜면 각각의 수학과 영어의 점수 합계가 출력이 되는것을 알수가 있음 ex 30 40 ; 20 50; 80 30; 25 40; 38 49; = 193 219
  이모든 데이터들이 전부타 2차원 배열을 활용했기 때문에 더욱 간단하게 코딩이 가능했던것임 각각의 점수같은 경우는 수학과 영어로 나누어지기 때문에
  수학과 영어가 들어갈수있는 2개의 공간을  int score[5][2]; 에서  [2] 이렇게 만들어준거고 위에 코딩에 전반적인 과장이 전부다 2차원 배열을 이용해서 
  이루어 진것임  
  
  이렇게 간단하게 학생점수의 총합을 구하는 프로그램까지 작성 해보았는데 이번시간에는 이렇게 다차원 배열에 대해서 공부해 보는 시간을 가졌고 
  2차원 배열같은것을 적절하게 활용했을때 정말 다양한 프로그램을 작성할수 있다는것을 알아보았음 
  
  
 2차 구구단을 이용하여 이차원 배열을 출력하기  
 
  #include <stdio.h>
int main (void)
{
	int i,j;
	int gugudan[10][10]; // 2차원 배열 생성 선언 크기는 둘다 10까지 있음   
	for(i=1;i<=9;i++)// 총 9번 반복  
	{
		printf("\n[ %d단 ]\n\n",i);// 1단부터 시작해서 9단까지 가는것임  
		for(j=1;j<=9;j++)       //여기는 위에서 한번 반복할때 9번 반복되는것인데  
		{
			gugudan[i][j]=i*j;  //  i=1 만 계속 반복되서 출력  j는 1~9 까지 차례대로 출력 아래처럼              
			                                       //   이차원배열은 | | | |  요런식으로 및으로 10개가 생기는 것임 1차원은 1자로 | | | | 이거 였다면           
			printf("%dX%d=%d\n",i,j,gugudan[i][j]);// 그러니까 즉    |1 | |1 |  
		}                                         //                 |1 | |2 |이런 식으로 하지만 구구단 배열의 값을 두개를 곱한거라고해서  
	}                                            //                  |1 | |3 |=3   이처럼 3.4.가 구구단 배열의 값이 되어 및에 출력을 하는것임  
	                                             //                  |1 | |4 |=4       
	return 0;                                   // printf("%dX%d=%d\n",i,j,gugudan[i][j]); 1 x 1 =1  1x2 2  1x3 3 이런식으로 배열안에 i와 j가  
	                                            // 배열안에 상자순서에 값이 차래대로 들어갈때 마다 그상자순서가 그값이 되고 그값을 불러낼수있는 프린트를
												// 활용해 출력한 것임 그래서 배열 하나에 상자1~9 순서가 그값이 되고 수사를 0부터 시작하기에   
												// gugudan[10][10] 구구단의 크기를 10 씩 입력해준것임  
 
}         /*  배열을 전체적인 도면으로 표현한다면 
            1차원 배열: 한줄이라고 생각  
	index(순서)		
	  0		|  |  ㅅ  이렇게 | | 상자하나에는 특정한 값이 들어갈수있음 
	  1		|  |  ! 
	  2		|  |  !
	  3		|  |  !
	  4	    |  |  ! 
  	  5	    |  |  ! 
			|  |  v 
			
			
			2차원 배열 : 한줄에 옆으로 한줄이 생긴다고 생각
	 
	 i\j 아래로 내려가는게 i 옆으로 퍼져나가는 행이 j 
	            ________________________
	  0		|  |_-->___-->_____-->___--> 이렇게 각각의 행에 배열이 하나의 행으로써 들어가는것을 2차원배열이라고 함  하나의 특정한 값이아닌 배열이 
	  1		|0 |1 |                         들어가는것임  그래서 i가 1 j가 1이면 왼쪽처럼 저기를 말하는것임 
	  2		|  |                            이렇게 9다시 9까지 가서 종료가되는것임   
	  3		|  |                             
	  4	    |  |                       이러한 형태 자체는 굉장히 많이 활용도가 높은데 지도를 표현하거나 미로찿기 같은 것을 할때 모두 
  	  5	    |  |                       이렇게 2차원배열의 형태로 표현된다고 할수있음 아니면 바둑게임 오목게임 2d 게임을 설계한다던가       
			|  |                   	   이러한 다양한 상황에서 2차원배열을 활용하여 배열을 이용할수있음 바로 다차원배열의 한형태라고 할수있는것임 
			                            대포적으로 2d게임같은경우도 이렇게 2차원 배열의 형태로 자표를 찍어서 저장하는 경우가 많음  
			          
					  
	 이 구구단을 이용하여 이차원배열을 출력하기 가 바로 2차원배열의 형태로 데이터를 관리한다고 하는것임 
	 위처럼 이러한 그림자체를 머리속에 그리면서 프로그래밍을 하는것이 굉장히 중요함 바로그러한 형태를 설계한 다음 프로그래밍으로 표현하는것을 
	 이 구구단을 이용하여 이차원배열을 출력하기  바로 이러한 형태라고 할수있음 
	
	
	
	
	복습 
	1. 다차원배열은 기본적으로 많은데이터를 체계적으로 관리하기 위해서 사용하는것임
	주로 2차원배열이 가장 많이 사용이 되면서 
	           ||
	           v
	a[0][0] a[0][1] a[0][2]
	a[1][0] a[1][1] a[1][2]
	a[2][0] a[2][1] a[2][2]
	이런식으로 다양한 데이터들을 (지도,2d게임중 좌표를 표현하는 방법) 관리하고 다양하게 2차원 배열을 사용하여 표현해낼수 있음 
	특히 구구단 성적 같은것을 출력할때 특히 많이 사용됨            
				      
  */
  
